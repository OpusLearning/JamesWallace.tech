name: Build & Deploy Frontend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  SSH_FINGERPRINT: ${{ secrets.SSH_FINGERPRINT }}

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT || 22 }}
          fingerprint: ${{ env.SSH_FINGERPRINT }}
          script_stop: true
          debug: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            set -x

            BRANCH="${GITHUB_REF_NAME:-main}"
            echo "Deploying branch: $BRANCH"

            # Ensure Node 20 via nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            echo "Using Node $(node -v) and npm $(npm -v)"

            # Repo sync
            mkdir -p /var/www/jameswallace.tech
            cd /var/www/jameswallace.tech

            if [ ! -d ".git" ]; then
              git clone git@github.com:OpusLearning/JamesWallace.tech.git .
            fi

            git config --global --add safe.directory /var/www/jameswallace.tech
            git fetch origin "$BRANCH"
            git checkout "$BRANCH" || git checkout -b "$BRANCH" "origin/$BRANCH"
            git pull --ff-only origin "$BRANCH"

            # Build frontend
            cd frontend
            rm -rf node_modules
            export npm_config_cache="/tmp/npm-cache-$RANDOM"
            rm -rf "$npm_config_cache" || true

            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund || { echo "npm ci failed"; tail -n +1 "$npm_config_cache"/_logs/* 2>/dev/null || true; exit 1; }
            else
              echo "No package-lock.json on server; using npm install"
              npm install --no-audit --no-fund || { echo "npm install failed"; tail -n +1 "$npm_config_cache"/_logs/* 2>/dev/null || true; exit 1; }
            fi

            npx vite build || { echo "vite build failed"; tail -n +1 "$npm_config_cache"/_logs/* 2>/dev/null || true; exit 1; }

            # Reload nginx (non-fatal)
            sudo systemctl reload nginx || true
