name: Build & Deploy Frontend

on:
  push:
    branches: ["main", "tutoring-rebrand"]
  workflow_dispatch: {}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Sanity CI build on runner with Node 20
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install & Build (CI)
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # Deploy & build on server (Node 20 via nvm), KEEP lockfile
      - name: Deploy via SSH (build on server with Node 20)
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.SERVER_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            set -x

            BRANCH="${GITHUB_REF_NAME:-main}"
            echo "Deploying branch: $BRANCH"

            # Ensure Node 20
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            . "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm use 20
            echo "Using Node $(node -v) and npm $(npm -v)"

            # Sync repo
            cd /var/www/jameswallace.tech
            if [ ! -d ".git" ]; then
              git clone git@github.com:OpusLearning/JamesWallace.tech.git .
            fi
            git config --global --add safe.directory /var/www/jameswallace.tech
            git fetch origin "$BRANCH"
            git checkout "$BRANCH" || git checkout -b "$BRANCH" "origin/$BRANCH"
            git pull --ff-only origin "$BRANCH"

            # Build (keep lockfile)
            cd frontend

            # do NOT delete package-lock.json
            rm -rf node_modules

            # isolated, throwaway npm cache to avoid ENOTEMPTY on shared cache
            export npm_config_cache="/tmp/npm-cache-$RANDOM"
            rm -rf "$npm_config_cache" || true

            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              echo "WARNING: package-lock.json missing on server; falling back to npm install"
              npm install --no-audit --no-fund
            fi

            npx vite build

            # Reload web server (non-fatal)
            sudo systemctl reload nginx || true
